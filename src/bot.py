from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from database import (
    init_db,
    Course,
    Lesson,
    User,
    UserProgress,
    Question,
    QuestionOption,
)
from datetime import datetime

import os
from dotenv import load_dotenv


class EducationBot:
    def __init__(self, token: str):
        self.token = token
        self.db = init_db()
        self.user_states = {}  # –•—Ä–∞–Ω–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self._init_demo_data()

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        user = (
            self.db.query(User)
            .filter(User.telegram_id == update.effective_user.id)
            .first()
        )
        if not user:
            user = User(
                telegram_id=update.effective_user.id,
                username=update.effective_user.username,
            )
            self.db.add(user)
            self.db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã
        courses = self.db.query(Course).all()
        keyboard = []

        course_emojis = {"–û–±—â–∞—è —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è": "üî¨", "–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏": "üíä"}

        for course in courses:
            emoji = course_emojis.get(course.title, "üìö")
            keyboard.append(
                [
                    InlineKeyboardButton(
                        f"{emoji} {course.title}", callback_data=f"course_{course.id}"
                    )
                ]
            )

        reply_markup = InlineKeyboardMarkup(keyboard)

        welcome_text = (
            "üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –±–æ—Ç –ø–æ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏!*\n\n"
            "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ò–∑—É—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–æ–≤ üìö\n"
            "‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã ‚úçÔ∏è\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å üìä\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:"
        )

        await update.message.reply_text(
            welcome_text, reply_markup=reply_markup, parse_mode="Markdown"
        )

    @staticmethod
    def generate_progress_bar(current, total, length=10):
        filled = int(length * (current / total))
        empty = length - filled
        return "‚ñà" * filled + "‚ñë" * empty

    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        def create_back_button(keyboard):
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"
                    )
                ]
            )

        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()

        if query.data == "main_menu":
            courses = self.db.query(Course).all()
            keyboard = []

            course_emojis = {"–û–±—â–∞—è —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—è": "üî¨", "–ê–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏": "üíä"}

            for course in courses:
                emoji = course_emojis.get(course.title, "üìö")
                keyboard.append(
                    [
                        InlineKeyboardButton(
                            f"{emoji} {course.title}",
                            callback_data=f"course_{course.id}",
                        )
                    ]
                )
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                "üéì *–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫—É—Ä—Å:*",
                reply_markup=reply_markup,
                parse_mode="Markdown",
            )

        elif query.data.startswith("course_"):
            course_id = int(query.data.replace("course_", ""))
            course = self.db.query(Course).filter(Course.id == course_id).first()
            if course:
                keyboard = []
                for lesson in course.lessons:
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                lesson.title,
                                callback_data=f"lesson_{course.id}_{lesson.id}",
                            )
                        ]
                    )

                create_back_button(keyboard)
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    f"üìö –ö—É—Ä—Å: {course.title}\n" f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:",
                    reply_markup=reply_markup,
                )

        elif query.data.startswith("lesson_"):
            _, course_id, lesson_id = query.data.split("_")
            user_id = query.from_user.id
            self.user_states[user_id] = {
                "course_id": int(course_id),
                "lesson_id": int(lesson_id),
            }

            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Ä–æ–∫—É:")

        elif query.data.startswith("answer_"):
            await self.handle_test_answer(update, context)

    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        if user_id in self.user_states:
            state = self.user_states[user_id]

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç
            if "test_mode" in state:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞"
                )
                return

            lesson = (
                self.db.query(Lesson).filter(Lesson.id == state["lesson_id"]).first()
            )

            if update.message.text == lesson.access_code:
                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —É—Ä–æ–∫–∞
                questions = (
                    self.db.query(Question)
                    .filter(Question.lesson_id == lesson.id)
                    .all()
                )

                lesson_text = (
                    f"‚úÖ *–ö–æ–¥ –≤–µ—Ä–Ω—ã–π!*\n\n"
                    f"üìù *{lesson.title}*\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                    f"{lesson.content}\n\n"
                    "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    "üöÄ –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è?\n"
                    "–ù–∞–∂–º–∏—Ç–µ /test —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
                )

                if not questions:
                    await update.message.reply_text(
                        f"‚úÖ –ö–æ–¥ –≤–µ—Ä–Ω—ã–π!\n\n"
                        f"üìù {lesson.title}\n\n"
                        f"{lesson.content}\n\n"
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
                    )
                    return

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —É—Ä–æ–∫–∞
                await update.message.reply_text(lesson_text, parse_mode="Markdown")

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                questions_data = []
                for question in questions:
                    options = (
                        self.db.query(QuestionOption)
                        .filter(QuestionOption.question_id == question.id)
                        .all()
                    )
                    options_data = []
                    for option in options:
                        options_data.append(
                            {"text": option.text, "is_correct": option.is_correct}
                        )
                    questions_data.append(
                        {
                            "id": question.id,
                            "text": question.text,
                            "options": options_data,
                        }
                    )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_states[user_id].update(
                    {
                        "questions": questions_data,
                        "current_question": 0,
                        "correct_answers": 0,
                    }
                )
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start"
            )

    async def start_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.message.from_user.id
        if user_id not in self.user_states:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ —Å –ø–æ–º–æ—â—å—é /start")
            return

        state = self.user_states[user_id]
        if "questions" not in state:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —É—Ä–æ–∫—É")
            return

        if not state["questions"]:
            await update.message.reply_text(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
            question = state["questions"][state["current_question"]]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
            keyboard = []
            for i, option in enumerate(question["options"]):
                keyboard.append(
                    [InlineKeyboardButton(option["text"], callback_data=f"answer_{i}")]
                )

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                f"–í–æ–ø—Ä–æ—Å {state['current_question'] + 1} –∏–∑ {len(state['questions'])}:\n\n"
                f"{question['text']}",
                reply_markup=reply_markup,
            )

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∞
            state["test_mode"] = True
        except Exception as e:
            await update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —É—Ä–æ–∫ –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /start"
            )
            print(f"Error in start_test: {e}")
            if user_id in self.user_states:
                del self.user_states[user_id]

    async def handle_test_answer(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        query = update.callback_query
        user_id = query.from_user.id
        state = self.user_states.get(user_id)

        if not state or "test_mode" not in state:
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /test"
            )
            return

        if not query.data.startswith("answer_"):
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            answer_index = int(query.data.split("_")[1])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
            if answer_index >= len(
                state["questions"][state["current_question"]]["options"]
            ):
                await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–æ–º –æ—Ç–≤–µ—Ç–∞")
                return

            question = state["questions"][state["current_question"]]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            is_correct = question["options"][answer_index]["is_correct"]
            if is_correct:
                state["correct_answers"] += 1
                await query.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞
                correct_option = next(
                    opt for opt in question["options"] if opt["is_correct"]
                )
                await query.answer(
                    f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_option['text']}"
                )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            state["current_question"] += 1

            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if state["current_question"] >= len(state["questions"]):
                score = (state["correct_answers"] / len(state["questions"])) * 100
                progress_bar = self.generate_progress_bar(
                    state["correct_answers"], len(state["questions"])
                )

                result_text = (
                    "üéØ *–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                    f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_bar}\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {state['correct_answers']} –∏–∑ {len(state['questions'])}\n"
                    f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score:.1f}%\n\n"
                    f"{'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!' if score >= 80 else 'üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å—Å—è!'}\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫"
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                try:
                    user = (
                        self.db.query(User).filter(User.telegram_id == user_id).first()
                    )
                    progress = UserProgress(
                        user_id=user.id,
                        lesson_id=state["lesson_id"],
                        test_score=int(score),
                    )
                    self.db.add(progress)
                    self.db.commit()
                except Exception as e:
                    print(f"Error saving progress: {e}")

                await query.edit_message_text(result_text, parse_mode="Markdown")
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                del self.user_states[user_id]

            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                next_question = state["questions"][state["current_question"]]
                keyboard = []
                for i, option in enumerate(next_question["options"]):
                    keyboard.append(
                        [
                            InlineKeyboardButton(
                                option["text"], callback_data=f"answer_{i}"
                            )
                        ]
                    )

                reply_markup = InlineKeyboardMarkup(keyboard)

                question_text = (
                    f"‚ùì *–í–æ–ø—Ä–æ—Å {state['current_question'] + 1} –∏–∑ {len(state['questions'])}*\n\n"
                    f"{next_question['text']}"
                )

                await query.edit_message_text(
                    question_text, reply_markup=reply_markup, parse_mode="Markdown"
                )

        except Exception as e:
            print(f"Error in handle_test_answer: {e}")
            await query.edit_message_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é /test"
            )
            if user_id in self.user_states:
                del self.user_states[user_id]

    def _init_demo_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫—É—Ä—Å–∞ –ø–æ —Ñ–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏–∏"""
        if not self.db.query(Course).first():
            from demo_data import DEMO_DATA

            for course_data in DEMO_DATA["courses"]:
                course = Course(title=course_data["title"])
                self.db.add(course)
                self.db.commit()

                for lesson_data in course_data["lessons"]:
                    lesson = Lesson(
                        title=lesson_data["title"],
                        content=lesson_data["content"],
                        access_code=lesson_data["access_code"],
                        course_id=course.id,
                    )
                    self.db.add(lesson)
                    self.db.commit()

                    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
                    for question_data in lesson_data["questions"]:
                        question = Question(
                            lesson_id=lesson.id, text=question_data["text"]
                        )
                        self.db.add(question)
                        self.db.commit()

                        for option_data in question_data["options"]:
                            option = QuestionOption(
                                question_id=question.id,
                                text=option_data["text"],
                                is_correct=option_data["is_correct"],
                            )
                            self.db.add(option)
                        self.db.commit()


def main():
    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")

    if not token:
        raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    bot = EducationBot(token)

    application = Application.builder().token(bot.token).build()

    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        print(f"Exception while handling an update: {context.error}")

    application.add_error_handler(error_handler)

    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("test", bot.start_test))
    application.add_handler(CallbackQueryHandler(bot.button_handler))
    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_text)
    )

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


# –≠—Ç–æ—Ç –±–ª–æ–∫ —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –í–ù–ï –∫–ª–∞—Å—Å–∞ (–±–µ–∑ –æ—Ç—Å—Ç—É–ø–æ–≤)
if __name__ == "__main__":
    main()
